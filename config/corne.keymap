
#include <behaviors.dtsi>

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define UPPER 1
#define LOWER 2
#define BOTH  3

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <UPPER LOWER>;
                        then-layer = <BOTH>;
                };
        };
// up:15 left:26 down:27 right:28
        behaviors {
                kt_on: kt_on {
                        compatible = "zmk,behavior-key-toggle";
                        #binding-cells = <1>;
                        toggle-mode = "on";
                };

                kt_off: kt_off {
                        compatible = "zmk,behavior-key-toggle";
                        #binding-cells = <1>;
                        toggle-mode = "off";
                };

                t_mwnd_up: t_mwnd_up {
                        compatible = "zmk,behavior-tri-state";
                        #binding-cells = <0>;
                        bindings = <&kt_on LGUI>, <&kp UP>, <&kt_off LGUI>;
                        ignored-key-positions = <26 27 28>;
                };

                t_mwnd_left: t_mwnd_left {
                        compatible = "zmk,behavior-tri-state";
                        #binding-cells = <0>;
                        bindings = <&kt_on LGUI>, <&kp LEFT>, <&kt_off LGUI>;
                        ignored-key-positions = <15 27 28>;
                };

                t_mwnd_down: t_mwnd_down {
                        compatible = "zmk,behavior-tri-state";
                        #binding-cells = <0>;
                        bindings = <&kt_on LGUI>, <&kp DOWN>, <&kt_off LGUI>;
                        ignored-key-positions = <15 26 28>;
                };

                t_mwnd_right: t_mwnd_right {
                        compatible = "zmk,behavior-tri-state";
                        #binding-cells = <0>;
                        bindings = <&kt_on LGUI>, <&kp RIGHT>, <&kt_off LGUI>;
                        ignored-key-positions = <15 26 27>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        display-name = "DEFAULT";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W    &kp E     &kp R        &kp T   &kp Y     &kp U    &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S    &kp D     &kp F        &kp G   &kp H     &kp J    &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X    &kp C     &kp V        &kp B   &kp N     &kp M    &kp COMMA &kp DOT &kp FSLH &kp RSFT
                   &kp LGUI &mo UPPER &kp SPACE    &kp RET &mo LOWER &kp RALT
                        >;
                };

                upper_layer {
                        display-name = "UPPER";
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC    &kp N1     &kp N2       &kp N3       &kp N4        &kp N5          &kp N6    &kp N7    &kp N8   &kp N9    &kp N0   &kp BSPC
   &kp LCTRL  &kp PG_UP  &none        &t_mwnd_up   &none         &none           &kp K_APP &kp HOME  &kp UP   &kp END   &kp SEMI &kp DEL
   &kp LSHFT  &kp PG_DN  &t_mwnd_left &t_mwnd_down &t_mwnd_right &none           &kp PSCRN &kp LEFT  &kp DOWN &kp RIGHT &kp FSLH &kp RSFT
                                      &kp LGUI     &trans        &kp SPACE       &kp RET   &trans    &kp RALT
                        >;
                };

                lower_layer {
                        display-name = "LOWER";
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC   &kp EXCL &kp AT   &kp HASH  &kp DLLR   &kp PRCNT       &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &kp PIPE &kp LBRC &kp LBKT  &kp PLUS   &kp UNDER       &kp MINUS &kp EQUAL &kp RBKT  &kp RBRC &kp BSLH &kp GRAVE
   &kp LSHFT &none    &none    &kp GRAVE &kp LPAR   &none           &none     &kp RPAR  &kp TILDE &none    &none    &kp RSHFT
                               &kp LGUI  &trans     &kp SPACE       &kp RET   &trans    &kp RALT
                        >;
                };

                both_layer {
                        display-name = "BOTH";
                        bindings = <
   &kp F11    &kp F1 &kp F2 &kp F3      &kp F4      &kp F5         &kp F6  &kp F7        &kp F8       &kp F9        &kp F10 &kp F12
   &none      &none  &none  &kp LS(F12) &kp LA(F12) &none          &none   &kp LA(LS(A)) &kp LA(UP)   &none         &none   &bt BT_NXT
   &bt BT_CLR &none  &none  &none       &none       &none          &none   &kp LA(LEFT)  &kp LA(DOWN) &kp LA(RIGHT) &none   &bt BT_PRV
                            &kp LGUI    &trans      &kp SPACE      &kp RET &trans        &kp RALT
                        >;
                };
        };
};
